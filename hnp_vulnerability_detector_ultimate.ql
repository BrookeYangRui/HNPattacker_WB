import python
import semmle.python.dataflow.DataFlow

/**
 * Host Name Pollution (HNP) 高级检测器
 * 自动追踪Host头的完整数据流，标记防护点，输出每条路径的可控性和详细链路。
 */

/**
 * 源点：所有可能读取Host头的地方
 */
class HostSource extends DataFlow::Source {
  HostSource() {
    exists(FunctionCall call |
      (
        // Flask: request.host, request.headers['Host']
        call.getTarget().hasName("host") or
        (call.getTarget().hasName("get") and
         call.getReceiver().toString() = "request.headers" and
         call.getArgument(0).getStringValue() = "Host") or
        // Django: request.get_host(), request.META['HTTP_HOST']
        call.getTarget().hasName("get_host") or
        (call.getTarget().hasName("get") and
         call.getReceiver().toString() = "request.META" and
         call.getArgument(0).getStringValue() = "HTTP_HOST") or
        // FastAPI: request.headers.get("host")
        (call.getTarget().hasName("get") and
         call.getReceiver().toString() = "request.headers" and
         call.getArgument(0).getStringValue().toLowerCase() = "host")
      )
    )
  }
}

/**
 * 汇点：所有敏感操作，包括URL生成、邮件发送、模板渲染
 */
class SensitiveSink extends DataFlow::Sink {
  SensitiveSink() {
    exists(FunctionCall call |
      // Flask/Django: url_for(_external=True), build_absolute_uri()
      (call.getTarget().hasName("url_for") and call.getArgument("_external").getBooleanValue() = true) or
      call.getTarget().hasName("build_absolute_uri") or
      // 邮件发送
      call.getTarget().hasName("send") or
      call.getTarget().hasName("send_email") or
      call.getTarget().hasName("send_mail") or
      // 模板渲染
      call.getTarget().hasName("render_template")
    )
  }
}

/**
 * 防护点建模：白名单校验、abort、validate_host等
 */
predicate isHostProtected(DataFlow::Node n) {
  exists(FunctionCall call |
    call.getTarget().hasName("abort") or
    call.getTarget().hasName("validate_host") or
    call.getTarget().hasName("check_host") or
    // 白名单校验（简单字符串匹配）
    exists(IfStmt ifs |
      ifs.getCondition().toString().regexpMatch(".*host.*not in.*") and
      n.asExpr() = ifs.getCondition()
    )
  )
}

/**
 * 主体：追踪Host头到敏感操作的所有数据流路径，标记防护点和可控性
 */
from HostSource src, SensitiveSink sink, DataFlow::PathNode path
where DataFlow::localFlow(src, sink, path)
select
  src.getNode().getLocation(),
  sink.getNode().getLocation(),
  path,
  case
    when exists(DataFlow::Node n | isHostProtected(n) and path.getNode() = n)
    then "已发现防护，理论不可被篡改"
    else "未发现防护，理论可被篡改"
  end,
  "完整数据流路径见path，建议人工复查。" 