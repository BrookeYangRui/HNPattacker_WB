/**
 * Host Name Pollution (HNP) 高级检测器
 * 自动追踪Host头的完整数据流，标记防护点，输出每条路径的可控性和详细链路。
 */

import python
import semmle.python.dataflow.new.DataFlow

class HNPConfig extends DataFlow::Configuration {
  HNPConfig() { this = "HNP Host Pollution" }

  override predicate isSource(DataFlow::Node source) {
    exists(CallNode call |
      source.asCfgNode() = call and (
        // Flask: request.host, request.headers['Host']
        call.getCalleeName() = "host" or
        (call.getCalleeName() = "get" and
         call.getReceiver().toString() = "request.headers" and
         call.getArgument(0).hasStringValue() and
         call.getArgument(0).getStringValue().toLowerCase() = "host") or
        // Django: request.get_host(), request.META['HTTP_HOST']
        call.getCalleeName() = "get_host" or
        (call.getCalleeName() = "get" and
         call.getReceiver().toString() = "request.META" and
         call.getArgument(0).hasStringValue() and
         call.getArgument(0).getStringValue().toLowerCase() = "http_host")
      )
    )
  }

  override predicate isSink(DataFlow::Node sink) {
    exists(CallNode call |
      sink.asCfgNode() = call and (
        // Flask/Django: url_for(_external=True), build_absolute_uri()
        (call.getCalleeName() = "url_for" and
         call.getKwarg("external").hasBooleanValue() and
         call.getKwarg("external").getBooleanValue() = true) or
        call.getCalleeName() = "build_absolute_uri" or
        // 邮件发送
        call.getCalleeName() = "send" or
        call.getCalleeName() = "send_email" or
        call.getCalleeName() = "send_mail" or
        // 模板渲染
        call.getCalleeName() = "render_template"
      )
    )
  }
}

/**
 * 防护点建模：白名单校验、abort、validate_host等
 */
predicate isHostProtected(DataFlow::Node n) {
  exists(CallNode call |
    n.asCfgNode() = call and (
      call.getCalleeName() = "abort" or
      call.getCalleeName() = "validate_host" or
      call.getCalleeName() = "check_host"
    )
  ) or
  exists(IfNode ifs |
    n.asCfgNode() = ifs.getCondition() and
    ifs.getCondition().toString().regexpMatch(".*host.*not in.*")
  )
}

/**
 * 主体：追踪Host头到敏感操作的所有数据流路径，标记防护点和可控性
 */
from HNPConfig cfg, DataFlow::PathNode source, DataFlow::PathNode sink
where cfg.hasFlowPath(source, sink)
select
  source.getNode().getLocation(),
  sink.getNode().getLocation(),
  sink,
  if exists(DataFlow::Node n | isHostProtected(n) and sink.getNode() = n)
    then "已发现防护，理论不可被篡改"
    else "未发现防护，理论可被篡改",
  "完整数据流路径见path，建议人工复查。" 