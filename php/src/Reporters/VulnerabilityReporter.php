<?php

namespace HnpLab\PhpHnpAnalyzer\Reporters;

use HnpLab\PhpHnpAnalyzer\Models\Vulnerability;

/**
 * 漏洞报告生成器
 */
class VulnerabilityReporter
{
    /**
     * 生成漏洞报告
     */
    public function generate(array $vulnerabilities, string $format = 'json'): string
    {
        switch (strtolower($format)) {
            case 'json':
                return $this->generateJsonReport($vulnerabilities);
            case 'html':
                return $this->generateHtmlReport($vulnerabilities);
            case 'csv':
                return $this->generateCsvReport($vulnerabilities);
            case 'text':
            default:
                return $this->generateTextReport($vulnerabilities);
        }
    }

    /**
     * 生成 JSON 格式报告
     */
    private function generateJsonReport(array $vulnerabilities): string
    {
        $report = [
            'summary' => $this->generateSummary($vulnerabilities),
            'vulnerabilities' => array_map(function(Vulnerability $vuln) {
                return $vuln->toArray();
            }, $vulnerabilities),
            'generated_at' => date('Y-m-d H:i:s'),
            'tool_version' => '1.0.0'
        ];

        return json_encode($report, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    }

    /**
     * 生成 HTML 格式报告
     */
    private function generateHtmlReport(array $vulnerabilities): string
    {
        $summary = $this->generateSummary($vulnerabilities);
        
        $html = '<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PHP HNP 静态分析报告</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #f5f5f5; padding: 20px; border-radius: 5px; }
        .summary { margin: 20px 0; }
        .vulnerability { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
        .high { border-left: 5px solid #dc3545; }
        .medium { border-left: 5px solid #ffc107; }
        .low { border-left: 5px solid #28a745; }
        .critical { border-left: 5px solid #6f42c1; }
        .file-path { font-weight: bold; color: #007bff; }
        .line-number { color: #6c757d; }
        .severity { font-weight: bold; text-transform: uppercase; }
    </style>
</head>
<body>
    <div class="header">
        <h1>PHP Host Name Pollution 静态分析报告</h1>
        <p>生成时间: ' . date('Y-m-d H:i:s') . '</p>
    </div>

    <div class="summary">
        <h2>分析摘要</h2>
        <ul>
            <li>总漏洞数: ' . $summary['total'] . '</li>
            <li>高危漏洞: ' . $summary['high'] . '</li>
            <li>中危漏洞: ' . $summary['medium'] . '</li>
            <li>低危漏洞: ' . $summary['low'] . '</li>
            <li>关键漏洞: ' . $summary['critical'] . '</li>
        </ul>
    </div>

    <div class="vulnerabilities">
        <h2>漏洞详情</h2>';

        foreach ($vulnerabilities as $vuln) {
            $severityClass = strtolower($vuln->getSeverity());
            $html .= '
        <div class="vulnerability ' . $severityClass . '">
            <div class="file-path">' . htmlspecialchars($vuln->getFilePath()) . '</div>
            <div class="line-number">第 ' . $vuln->getLine() . ' 行</div>
            <div class="severity">' . strtoupper($vuln->getSeverity()) . '</div>
            <div>' . htmlspecialchars($vuln->getDescription()) . '</div>
            <div><strong>类型:</strong> ' . htmlspecialchars($vuln->getType()) . '</div>
        </div>';
        }

        $html .= '
    </div>
</body>
</html>';

        return $html;
    }

    /**
     * 生成 CSV 格式报告
     */
    private function generateCsvReport(array $vulnerabilities): string
    {
        $csv = "文件路径,行号,类型,描述,严重程度,时间戳\n";
        
        foreach ($vulnerabilities as $vuln) {
            $csv .= sprintf(
                '"%s",%d,"%s","%s","%s","%s"' . "\n",
                $vuln->getFilePath(),
                $vuln->getLine(),
                $vuln->getType(),
                $vuln->getDescription(),
                $vuln->getSeverity(),
                $vuln->getTimestamp()->format('Y-m-d H:i:s')
            );
        }

        return $csv;
    }

    /**
     * 生成文本格式报告
     */
    private function generateTextReport(array $vulnerabilities): string
    {
        $summary = $this->generateSummary($vulnerabilities);
        
        $report = "PHP Host Name Pollution 静态分析报告\n";
        $report .= "=====================================\n\n";
        $report .= "生成时间: " . date('Y-m-d H:i:s') . "\n\n";
        
        $report .= "分析摘要:\n";
        $report .= "- 总漏洞数: " . $summary['total'] . "\n";
        $report .= "- 高危漏洞: " . $summary['high'] . "\n";
        $report .= "- 中危漏洞: " . $summary['medium'] . "\n";
        $report .= "- 低危漏洞: " . $summary['low'] . "\n";
        $report .= "- 关键漏洞: " . $summary['critical'] . "\n\n";
        
        $report .= "漏洞详情:\n";
        $report .= "==========\n\n";
        
        foreach ($vulnerabilities as $index => $vuln) {
            $report .= ($index + 1) . ". " . $vuln . "\n\n";
        }

        return $report;
    }

    /**
     * 生成摘要统计
     */
    private function generateSummary(array $vulnerabilities): array
    {
        $summary = [
            'total' => count($vulnerabilities),
            'high' => 0,
            'medium' => 0,
            'low' => 0,
            'critical' => 0
        ];

        foreach ($vulnerabilities as $vuln) {
            $severity = strtolower($vuln->getSeverity());
            if (isset($summary[$severity])) {
                $summary[$severity]++;
            }
        }

        return $summary;
    }
}
